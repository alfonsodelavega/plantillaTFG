

@misc{dbschema,
	title = {{DBSchema}},
	url = {https://dbschema.com/?AFFILIATE=144826&__c=1},
}








@misc{noauthor_aria2_nodate,
	title = {aria2},
	url = {https://github.com/aria2/aria2},
	abstract = {aria2 is a utility for downloading files. The supported protocols are HTTP(S), FTP, SFTP, BitTorrent, and Metalink. aria2 can download a file from multiple sources/protocols and tries to utilize your maximum download bandwidth. It supports downloading a file from HTTP(S)/FTP/SFTP and BitTorrent at the same time, while the data downloaded from HTTP(S)/FTP/SFTP is uploaded to the BitTorrent swarm. Using Metalink's chunk checksums, aria2 automatically validates chunks of data while downloading a file like BitTorrent.},
}

@misc{johnson_spring_2022,
	title = {Spring {Framework} {Documentation}},
	copyright = {All Rights Reserved},
	url = {https://docs.spring.io/spring-framework/docs/current/reference/html/},
	abstract = {Spring makes it easy to create Java enterprise applications. It provides everything you need to embrace the Java language in an enterprise environment, with support for Groovy and Kotlin as alternative languages on the JVM, and with the flexibility to create many kinds of architectures depending on an application’s needs. As of Spring Framework 5.1, Spring requires JDK 8+ (Java SE 8+) and provides out-of-the-box support for JDK 11 LTS. Java SE 8 update 60 is suggested as the minimum patch release for Java 8, but it is generally recommended to use a recent patch release.

Spring supports a wide range of application scenarios. In a large enterprise, applications often exist for a long time and have to run on a JDK and application server whose upgrade cycle is beyond developer control. Others may run as a single jar with the server embedded, possibly in a cloud environment. Yet others may be standalone applications (such as batch or integration workloads) that do not need a server.

Spring is open source. It has a large and active community that provides continuous feedback based on a diverse range of real-world use cases. This has helped Spring to successfully evolve over a very long time.},
	urldate = {2022-06-01},
	publisher = {Pivotal},
	author = {Johnson, Rod},
	month = jun,
	year = {2022},
}

@inproceedings{williams_strategie_2015,
	address = {Santa Clara, CA, USA},
	title = {Strategie roadmap for the earth system grid federation},
	isbn = {978-1-4799-9926-2},
	url = {http://ieeexplore.ieee.org/document/7364005/},
	doi = {10.1109/BigData.2015.7364005},
	abstract = {This article describes the Earth System Grid Federation (ESGF) mission and an international integration strategy for data, database and computational architecture, and stable infrastructure highlighted by the authors (the ESGF Executive Committee). These highlights are key developments needed over the next five to seven years in response to largescale national and international climate community projects that depend on ESGF for success. Quality assurance and baseline performance from laptop to high performance computing characterizes available and potential data streams and strategies. These are required for interactive data collections to remedy gaps in handling enormous international federated climate data archives. Appropriate cyber security ensures protection of data according to projects but still allows access and portability to different ESGF and individual groups and users. A timeline and plan for forecasting interoperable tools takes ESGF from a federated database archive to a robust virtual laboratory and concludes the article.},
	language = {en},
	urldate = {2020-01-16},
	booktitle = {2015 {IEEE} {International} {Conference} on {Big} {Data} ({Big} {Data})},
	publisher = {IEEE},
	author = {Williams, Dean N. and Lautenschlager, Michael and Balaji, Venkatramani and Cinquini, Luca and DeLuca, Cecilia and Denvil, Sebastien and Duffy, Daniel and Evans, Ben and Ferraro, Robert and Juckes, Martin and Trenham, Claire},
	month = oct,
	year = {2015},
	pages = {2182--2190},
}

@article{williams_global_2016,
	title = {A {Global} {Repository} for {Planet}-{Sized} {Experiments} and {Observations}},
	volume = {97},
	issn = {0003-0007, 1520-0477},
	url = {https://journals.ametsoc.org/doi/10.1175/BAMS-D-15-00132.1},
	doi = {10.1175/BAMS-D-15-00132.1},
	abstract = {Abstract 
            Working across U.S. federal agencies, international agencies, and multiple worldwide data centers, and spanning seven international network organizations, the Earth System Grid Federation (ESGF) allows users to access, analyze, and visualize data using a globally federated collection of networks, computers, and software. Its architecture employs a system of geographically distributed peer nodes that are independently administered yet united by common federation protocols and application programming interfaces (APIs). The full ESGF infrastructure has now been adopted by multiple Earth science projects and allows access to petabytes of geophysical data, including the Coupled Model Intercomparison Project (CMIP)—output used by the Intergovernmental Panel on Climate Change assessment reports. Data served by ESGF not only include model output (i.e., CMIP simulation runs) but also include observational data from satellites and instruments, reanalyses, and generated images. Metadata summarize basic information about the data for fast and easy data discovery.},
	language = {en},
	number = {5},
	urldate = {2022-01-27},
	journal = {Bulletin of the American Meteorological Society},
	author = {Williams, Dean N. and Balaji, V. and Cinquini, Luca and Denvil, Sébastien and Duffy, Daniel and Evans, Ben and Ferraro, Robert and Hansen, Rose and Lautenschlager, Michael and Trenham, Claire},
	month = may,
	year = {2016},
	pages = {803--816},
}

@inproceedings{allcock_globus_2005,
	address = {Seattle, WA, USA},
	title = {The {Globus} {Striped} {GridFTP} {Framework} and {Server}},
	isbn = {978-1-59593-061-3},
	url = {http://ieeexplore.ieee.org/document/1560006/},
	doi = {10.1109/SC.2005.72},
	urldate = {2022-07-04},
	booktitle = {{ACM}/{IEEE} {SC} 2005 {Conference} ({SC}'05)},
	publisher = {IEEE},
	author = {Allcock, W. and Bresnahan, J. and Kettimuthu, R. and Link, M.},
	year = {2005},
	pages = {54--54},
	file = {Full Text:files/40/Allcock et al. - 2005 - The Globus Striped GridFTP Framework and Server.pdf:application/pdf},
}

@misc{noauthor_authorization_nodate,
	title = {Authorization {Code} {Grant}},
	url = {https://docs.wso2.com/display/IS530/Authorization+Code+Grant},
}

@book{richer_oauth_2017,
	address = {Shelter Island, NY},
	title = {{OAuth} 2 in action},
	isbn = {978-1-61729-327-6},
	abstract = {This book teaches you practical use and deployment of OAuth 2 from the perspectives of a client, an authorization server, and a resource server. You'll begin with an overview of OAuth and its components and interactions. Next, you'll get hands-on and build an OAuth client, an authorization server, and a protected resource. Then you'll dig into tokens, dynamic client registration, and more advanced topics},
	publisher = {Manning Publications},
	author = {Richer, Justin and Sanso, Antonio and Glazer, Ian},
	year = {2017},
	note = {OCLC: ocn945947689},
	keywords = {Access control, Application program interfaces (Computer software), Data protection, OAuth, Security measures, Web services, World Wide Web},
	annote = {What is OAuth 2.0 and why should you care? -- The OAuth dance -- Building a simple OAuth client -- Building a simple OAuth protected resource -- Building a simple OAuth authorization server -- OAuth 2.0 in the real world -- Common client vulnerabilities -- Common protected resourcs vulnerabilities -- Common authorization server vulnerabilities -- Common OAuth token vulnerabilities -- OAuth tokens -- Dynamic client registration -- User authoentication with OAuth 2.0 -- Protocols and profiles using OAuth 2.0 -- Beyond bearer tokens -- Summary and conclusions},
}

@misc{springprofiles,
	title = {Spring profiles},
	url = {https://docs.spring.io/spring-boot/docs/1.2.0.M1/reference/html/boot-features-profiles.html},
}

@book{book,
author = {Pohl, Klaus},
year = {2010},
month = {01},
pages = {},
title = {Requirements Engineering: Fundamentals, Principles, and Techniques},
isbn = {978-3-642-12577-5},
doi = {10.1007/978-3-642-12578-2}
}
@misc{noauthor_esgf_nodate,
	title = {{ESGF} {Federation} {Design}},
	url = {https://esgf.llnl.gov/federation-design.html},
	abstract = {The Earth System Grid Federation (ESGF) is a spontaneous collaboration of groups, agencies and institutions around the world, that are dedicated to the development and operation of a long-term system for the management, access and analysis of climate data.},
	urldate = {2022-07-04},
}

@misc{ed_d_hardt_oauth20_2012,
	title = {{OAuth2}.0},
	url = {https://datatracker.ietf.org/doc/html/rfc6749},
	abstract = {The OAuth 2.0 authorization framework enables a third-party
   application to obtain limited access to an HTTP service, either on
   behalf of a resource owner by orchestrating an approval interaction
   between the resource owner and the HTTP service, or by allowing the
   third-party application to obtain access on its own behalf.  This
   specification replaces and obsoletes the OAuth 1.0 protocol described
   in RFC 5849.},
	urldate = {2022-07-04},
	publisher = {Microsoft},
	author = {Ed. D. Hardt},
	month = oct,
	year = {2012},
}

@misc{noauthor_springandoauth2_nodate,
	title = {{SpringAndOauth2}},
	url = {https://spring.io/guides/tutorials/spring-boot-oauth2/},
	abstract = {This guide shows you how to build a sample app doing various things with "social login" using OAuth 2.0 and Spring Boot.},
	urldate = {2022-07-04},
}

@misc{Metalink,
	title = {Metalink},
	url = {https://en.wikipedia.org/wiki/Metalink},
	urldate = {2022-05-04},
}

@misc{objectAid,
	title = {{ObjectAid}},
	url = {https://marketplace.eclipse.org/content/objectaid-uml-explorer},
}

@misc{ModelAndViewAssert,
	title = {{ModelAndViewAssert}},
	url = {https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html},
}

@misc{wget,
	title = {wget},
	url = {https://www.gnu.org/software/wget/},
}

@book{sommerville_software_2011,
	address = {Boston},
	edition = {9th ed},
	title = {Software engineering},
	isbn = {978-0-13-703515-1 978-0-13-705346-9},
	publisher = {Pearson},
	author = {Sommerville, Ian},
	year = {2011},
	note = {OCLC: ocn462909026},
	keywords = {Software engineering},
}

@misc{ruiz_diseno_nodate,
	title = {Diseño de {Software}},
	url = {https://www.ctr.unican.es/asignaturas/is1/is1-t04-trans.pdf},
	author = {Ruiz, Francisco},
}

@misc{esgfapi,
	title = {The {ESGF} {Search} {RESTful} {API}},
	url = {https://esgf.github.io/esg-search/ESGF_Search_RESTful_API.html},
}

@misc{orcidoauth2,
	title = {{API} {Tutorial}: {Get} an {Authenticated} {ORCID} {iD}},
	url = {https://info.orcid.org/documentation/api-tutorials/api-tutorial-get-and-authenticated-orcid-id/},
	abstract = {The tutorial describes the steps to authenticate an ORCID iD. It can be completed using either the public or member API. It reviews the steps to retrieve a verified ORCID iD, which can then be stored in your system’s database. There are two options: 3 legged OAuth (for long lived update permissions) and Implicit OAuth (for read-only short term permissions).},
}

@misc{githuboauth2,
	title = {Github {OAuth}},
	url = {https://docs.github.com/es/developers/apps/building-oauth-apps/authorizing-oauth-apps},
}

@misc{springjpa,
	title = {Spring {Data} {JPA}},
	url = {https://spring.io/projects/spring-data-jpa},
	abstract = {Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.

Implementing a data access layer of an application has been cumbersome for quite a while. Too much boilerplate code has to be written to execute simple queries as well as perform pagination, and auditing. Spring Data JPA aims to significantly improve the implementation of data access layers by reducing the effort to the amount that’s actually needed. As a developer you write your repository interfaces, including custom finder methods, and Spring will provide the implementation automatically.},
}

@misc{noauthor_spring_nodate-1,
	title = {Spring},
	url = {https://spring.io},
}

@misc{html,
	title = {{HTML}},
	url = {https://en.wikipedia.org/wiki/HTML},
}

@misc{css,
	title = {{CSS}},
	url = {https://en.wikipedia.org/wiki/CSS},
}

@misc{java,
	title = {{JAVA}},
	url = {https://en.wikipedia.org/wiki/Java_(programming_language)},
}

@misc{oauth2,
	title = {{OAuth}},
	url = {https://en.wikipedia.org/wiki/OAuth},
}

@misc{derby,
	title = {Apache {Derby} {Embebbed}},
	url = {https://db.apache.org/derby/papers/DerbyTut/embedded_intro.html},
}

@misc{jsp,
	title = {{JSP}},
	url = {https://en.wikipedia.org/wiki/Jakarta_Server_Pages},
}

@misc{dap,
	title = {{DAP}},
	url = {https://www.earthdata.nasa.gov/s3fs-public/imported/ESE-RFC-004v1.1.pdf},
	author = {Gallagher, Potter, Sgouros, Hankin, Flierl},
}

@misc{noauthor_earth_nodate,
	title = {Earth {System} {Grid} {Federation}},
	url = {https://esgf.llnl.gov},
}

@misc{tier1,
	title = {{ESGF} {Tier}},
	url = {https://esgf.llnl.gov/esgf-media/pdf/ESGFTier1and2NodeSiteRequirement-V5.pdf},
}


@misc{json,
	title = {{JSON}},
	url = {https://es.wikipedia.org/wiki/JSON},
}

@misc{xml,
	title = {{XML}},
	url = {https://es.wikipedia.org/wiki/Extensible_Markup_Language},
}

@misc{yaml,
	title = {{YAML}},
	url = {https://www.redhat.com/es/topics/automation/what-is-yaml},
}




